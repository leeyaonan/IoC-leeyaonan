<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
">

    <context:component-scan base-package="com.leeyaonan.aop"></context:component-scan>

    <!-- 开启AOP编程注解，开启后标识为@Aspect的bean的AOP才会生效 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

    <!--spring声明式事务配置，声明式事务无非就是配置一个aop，只不过有些标签不一样罢了-->
    <!--横切逻辑-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg name="dataSource" ref="dataSource"></constructor-arg>
    </bean>-->

    <!--声明式事务的注解驱动-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!--根标签beans，里面配置一个又一个的bean子标签，每一个bean子标签都代表一个类的配置-->
    <!--id标识了对象，class是类的全限定类名-->
    <bean id="accountDao" class="com.leeyaonan.dao.impl.JdbcAccountDaoImpl">
        <property name="ConnectionUtils" ref="connectionUtils"/>
    </bean>

    <bean id="transferService" class="com.leeyaonan.service.impl.TransferServiceImpl">
        <!--set + name之后锁定到值的set方法，通过反射技术可以调用该方法传入对应的值-->
        <property name="AccountDao" ref="accountDao"></property>
    </bean>


    <bean id="connectionUtils" class="com.leeyaonan.utils.ConnectionUtils"></bean>

    <!--事务管理器-->
    <bean id="transactionManager" class="com.leeyaonan.utils.TransactionManager">
        <property name="ConnectionUtils" ref="connectionUtils"/>
    </bean>

    <!--代理对象工厂-->
    <bean id="proxyFactory" class="com.leeyaonan.factory.ProxyFactory">
        <property name="TransactionManager" ref="transactionManager"/>
    </bean>

</beans>